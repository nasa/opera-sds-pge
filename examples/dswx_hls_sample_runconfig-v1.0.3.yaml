# Sample RunConfig for use with the DSWx-HLS PGE v1.0.3
# This RunConfig should require minimal changes in order to be used with the
# OPERA PCM.

RunConfig:
    # Name for the RunConfig, may be any string
    Name: OPERA-DSWX-HLS-PGE-SAMPLE-CONFIG

    Groups:
        # PGE-specific RunConfig section
        # This section is only used by the PGE, however, paths to inputs/outputs
        # should align with the similar sections of the SAS RunConfig
        PGE:
            PGENameGroup:
                # Name of the PGE for use with this RunConfig, should always be
                # DSWX_HLS_PGE when using with the DSWx-HLS PGE
                PGEName: DSWX_HLS_PGE

            InputFilesGroup:
                # List of input files/directories
                # Must be either a top-level directory containing one or more HLS
                # .tif files, or a list of all HLS .tif files for use with the job
                # Paths must correspond to the file system within the Docker container
                InputFilePaths:
                    - /home/conda/input_dir

            DynamicAncillaryFilesGroup:
                # Map of ancillary file types to paths to the file
                # Paths must correspond to the file system within the Docker container
                AncillaryFileMap:
                    # Path to the Digital Elevation Model
                    # Must be either a single .tif, or a .vrt that points to one
                    # or more .tif files
                    dem_file: /home/conda/input_dir/dem.vrt

                    # Path to the Landcover map
                    # Must point to a single .tif file
                    landcover_file: /home/conda/input_dir/landcover.tif

                    # Path to the Worldcover map
                    # Must be either a single .tif, or a .vrt that points to one
                    # or more .tif files
                    worldcover_file: /home/conda/input_dir/worldcover.vrt

            ProductPathGroup:
                # Path to where output products should be stored
                # Must correspond to the file system within the Docker container,
                # and must have write permissions for the User/Group used with
                # the "Docker run" command
                OutputProductPath: /home/conda/output_dir

                # Path to a scratch directory for the PGE and SAS to store
                # intermediate files that will not be needed after PGE execution
                # completes
                # Must correspond to the file system within the Docker container,
                # and must have write permissions for the User/Group used with
                # the "Docker run" command
                ScratchPath: /home/conda/output_dir/scratch_dir

            PrimaryExecutable:
                # Identifier for the PGE executable, should always be DSWX_HLS for
                # this PGE
                ProductIdentifier: DSWX_HLS

                # Product version specific to output products
                ProductVersion: 1.0

                # Path to the executable to run, path must be reachable from
                # within the Docker container (i.e. findable with a "which" command)
                ProgramPath: python3

                # List of command-line options to use with ProgramPath
                ProgramOptions:
                    - /home/conda/proteus-1.0.1/bin/dswx_hls.py
                    - --full-log-format

                # The Error Code base value added to the offset values to make
                # error codes unique per-PGE
                ErrorCodeBase: 100000

                # Path to the Yamale schema used to validate the SAS portion
                # of the RunConfig
                # Path should correspond to the file system within the Docker
                # container, and typically should reference a schema file bundled
                # with the opera_pge installation directory within the container
                # Consult the Docker image build scripts for more info
                SchemaPath: /home/conda/opera/pge/dswx_hls/schema/dswx_hls_sas_schema.yaml

                # Path to the Jinja2 template used to generate the ISO xml
                # metadata file
                # Path should correspond to the file system within the Docker
                # container, and typically should reference a template file bundled
                # with the opera_pge installation directory within the container
                # Consult the Docker image build scripts for more info
                IsoTemplatePath: /home/conda/opera/pge/dswx_hls/templates/OPERA_ISO_metadata_L3_DSWx_HLS_template.xml.jinja2

                # Path to a YAML file mapping Measured Parameter metadata names to descriptions used to supplement the ISO xml
                # metadata file
                # Path should correspond to the file system within the Docker
                # container, and typically should reference a template file bundled
                # with the opera_pge installation directory within the container
                # Consult the Docker image build scripts for more info
                IsoMeasuredParameterDescriptions: /home/conda/opera/pge/dswx_hls/templates/dswx_hls_measured_parameters.yaml


            QAExecutable:
                # Set to True to enable execution of an additional "Quality Assurance"
                # application after SAS execution has completed
                Enabled: False

                # Path to the executable to run, path must be reachable from
                # within the Docker container (i.e. findable with a "which" command)
                ProgramPath:

                # List of command-line options to use with ProgramPath
                ProgramOptions:

            DebugLevelGroup:
                # Set to True to enable Debug mode (Note: currently a no-op for this PGE)
                DebugSwitch: False

                # Set to True to have the PGE invoke the SAS/QA executables via
                # a shell, rather than a Python subprocess
                # This allows shell-style syntax to be used in ProgramPath and
                # ProgramOptions, which can be useful for testing
                ExecuteViaShell: False

        # SAS-specific RunConfig section
        # Prior to SAS execution by the PGE, the section below starting at "runconfig"
        # is isolated into its own YAML file for use with the SAS
        SAS:
            runconfig:
                name: dswx_hls_workflow_default

                groups:
                    pge_name_group:
                        pge_name: DSWX_HLS_PGE

                    # This section should match the InputFilesGroup of the PGE RunConfig
                    input_file_group:
                        # REQUIRED - Single HLS dataset (directory or files)
                        input_file_path:
                            - /home/conda/input_dir

                    # This section should match the paths used in the
                    # DynamicAncillaryFilesGroup section of the PGE RunConfig
                    dynamic_ancillary_file_group:
                        dem_file: /home/conda/input_dir/dem.vrt
                        dem_file_description: Digital Elevation Model (DEM) for the NASA OPERA project (v1.0) based on the Copernicus DEM 30-m and Copernicus 90-m referenced to the WGS84 ellipsoid

                        landcover_file: /home/conda/input_dir/landcover.tif
                        landcover_file_description: Land Cover 100m - collection 3 - epoch 2019 discrete classification map

                        worldcover_file: /home/conda/input_dir/worldcover.vrt
                        worldcover_file_description: ESA WorldCover 10m 2020 v1.0

                    primary_executable:
                        # This should match the value used for ProductIdentifier
                        product_type: DSWX_HLS

                    product_path_group:
                        # This should match the path used for OutputProductPath
                        product_path: /home/conda/output_dir

                        # This should match the path used for ScratchPath
                        scratch_path: /home/conda/output_dir/scratch_dir

                        # SAS writes DSWx-HLS products as a set of GeoTIFF layers
                        # All files are saved within the output_directory following
                        # the scheme:
                        # {output_dir}/{product_id}_{layer_name}.tif
                        # If the field product_id is left empty, the prefix "dswx_hls"
                        # will be used instead
                        output_dir: /home/conda/output_dir
                        product_id: dswx_hls
                        product_version: 1.0

                    processing:
                        # Check if ancillary inputs cover entirely the output product
                        check_ancillary_inputs_coverage: True

                        # Apply ocean masking
                        apply_ocean_masking: False

                        save_wtr: True    # Layer 1 - WTR
                        save_bwtr: True   # Layer 2 - BWTR
                        save_conf: True   # Layer 3 - CONF
                        save_diag: True   # Layer 4 - DIAG
                        save_wtr_1: True   # Layer 5 - WTR-1
                        save_wtr_2: True   # Layer 6 - WTR-2
                        save_land: True   # Layer 7 - LAND
                        save_shad: True   # Layer 8 - SHAD
                        save_cloud: True  # Layer 9 - CLOUD
                        save_dem: True    # Layer 10 - DEM

                        # Reflectance RGB color composition
                        save_rgb: False

                        # SWIR-1, NIR, and Red reflectance color composition
                        save_infrared_rgb: False

                    # Settings for saving browse image GeoTIFF/PNG of the WTR layer.
                    browse_image_group:
                        # Save a full-res Cloud-Optimized GEOTIFF DSWx-HLS browse image and
                        # a modified-resolution PNG of the browse image for DSWx-HLS
                        save_browse: True

                        # Setting `browse_image_height` and `browse_image_width` equal
                        # will maintain this original HLS and DSWx-HLS aspect ratio
                        # of 3660 pixels x 3660 pixels for the PNG browse image.
                        # If these fields are left empty, 1024 x 1024 will be used.

                        # Height in pixels for the PNG browse image
                        browse_image_height: 1024

                        # Width in pixels for the PNG browse image
                        browse_image_width: 1024

                        # Flag to exclude the Partial Surface Water Aggressive (PSW-Agg)
                        # class in the browse image. If True, PSW-Agg pixels will
                        # appear as Not Water. If False, this class will be displayed
                        # in the browse image, same as in WTR. Default is False.
                        exclude_psw_aggressive_in_browse: False

                        # Define how Not Water (e.g. land) appears in the browse image.
                        # Defaults to 'white'.
                        # Options are: 'white', 'nodata'
                        #   'white'         : Not Water pixels will be white
                        #   'nodata'        : Not Water pixels will be marked as not having
                        #                     valid data, and will be fully transparent
                        not_water_in_browse: 'white'

                        # Define how cloud appears in the browse image.
                        # Defaults to 'gray'.
                        # Options are: 'gray', 'nodata'
                        #   'gray'          : cloud pixels will be opaque gray
                        #   'nodata'        : cloud pixels will be marked as not having
                        #                     valid data, and will be fully transparent
                        cloud_in_browse: 'gray'

                        # Define how snow appears in the browse image.
                        # Defaults to 'cyan'.
                        # Options are: 'cyan', 'gray', 'nodata'
                        #   'cyan'          : snow will be opaque cyan
                        #   'gray'          : snow will be opaque gray
                        #   'nodata'        : snow pixels will be marked as not having
                        #                     valid data, and will be fully transparent
                        snow_in_browse: 'cyan'
