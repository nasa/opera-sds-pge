#!/usr/bin/env groovy

pipeline {
    agent any
    environment {
        DOCKER_IMAGE_PREFIX = 'opera_pge'
        // TODO: update as newer PGE's are added
        DOCKER_IMAGE_SUFFIXES = 'dswx_hls,cslc_s1,rtc_s1,dswx_s1,disp_s1,dswx_ni,dist_s1,tropo'
        DOCKER_TAG = """${sh(
                     returnStdout: true,
                     script: 'echo ${GIT_BRANCH##*/}-build-test-$$'
                     ).trim()}"""
    }
    parameters {
        string(name: 'ART_DOCKER_REGISTRY', defaultValue: 'artifactory-fn.jpl.nasa.gov:16001',
               description: 'Address of Artifactory-FN Docker registry for uploading Docker images.')
        credentials (name: 'ART_CREDENTIALS',
                     defaultValue: 'artifactory-operapgebot',
                     credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl',
                     description: 'Artifactory-FN credentials for account operapgebot. Used to push/pull images from Artifactory during build.',
                     required: true)
    }
    stages {
        stage('Scan for possible secrets'){
            steps{
                sh label: "Secrets scan",
                   script: ".ci/scripts/util/secrets_scan.sh"

                archiveArtifacts artifacts: ".secrets.new", allowEmptyArchive: true, fingerprint: true
                archiveArtifacts artifacts: ".secrets.diff", allowEmptyArchive: true, fingerprint: true

                sh label: "Compare scan result to baseline",
                   script: ".ci/scripts/util/secrets_scan_compare.sh"
            }
        }
        stage('Build OPERA PGE Docker image(s)') {
            steps {
                script {
                    docker.withRegistry ('https://' + params.ART_DOCKER_REGISTRY, params.ART_CREDENTIALS) {
                        echo "Building ${DOCKER_IMAGE_PREFIX} docker images with tag ${DOCKER_TAG}"
                        sh label: 'Build all OPERA Docker images',
                           script: ".ci/scripts/util/build_all_images.sh $DOCKER_TAG"
                    }
                }
            }
        }
        stage('Test OPERA PGE Docker image(s)') {
            steps {
                echo "Testing ${DOCKER_IMAGE_PREFIX} docker images with tag ${DOCKER_TAG}"
                sh label: 'Test all OPERA Docker images',
                   script: ".ci/scripts/util/test_all_images.sh $DOCKER_TAG"
                junit 'test_results/**/*.xml'
                archiveArtifacts artifacts: 'test_results/**/*.log', fingerprint: true
                script {
                    def indexFiles = []
                    def reportTitles = []

                    DOCKER_IMAGE_SUFFIXES.tokenize(',').each { DOCKER_IMAGE_SUFFIX ->
                        indexFiles << "${DOCKER_IMAGE_SUFFIX}/coverage_html/index.html"
                        reportTitles << "${DOCKER_IMAGE_SUFFIX} Code Coverage"
                    }

                    publishHTML([allowMissing: true,
                                 alwaysLinkToLastBuild: true,
                                 keepAll: true,
                                 reportDir: "test_results",
                                 reportFiles: indexFiles.join(','),
                                 reportName: "Code Coverage",
                                 reportTitles: reportTitles.join(',')])
                }
            }
        }
        stage('Scan image(s) for vulnerabilities'){
            environment{
                TMPDIR = '/data/tmp'
            }
            steps{
                echo "Scanning ${DOCKER_IMAGE_PREFIX} docker images with tag ${DOCKER_TAG} for patchable vulnerabilities"
                sh label: 'Update Grype DB',
                   script: "grype db update"
                script{
                    DOCKER_IMAGE_SUFFIXES.tokenize(',').each { DOCKER_IMAGE_SUFFIX ->
                        echo "Checking ${DOCKER_IMAGE_PREFIX}/${DOCKER_IMAGE_SUFFIX} docker image with tag ${DOCKER_TAG}"
                        sh label: "Check ${DOCKER_IMAGE_PREFIX}/${DOCKER_IMAGE_SUFFIX} OPERA Docker image",
                           script: """
                           grype ${DOCKER_IMAGE_PREFIX}/${DOCKER_IMAGE_SUFFIX}:$DOCKER_TAG --only-fixed -o template -t .ci/jenkins/grype_html.tmpl --file test_results/${DOCKER_IMAGE_SUFFIX}/grype_vulnerabilities.html
                           """
                    }

                    archiveArtifacts artifacts: 'test_results/**/grype_vulnerabilities.html', fingerprint: true
                }
            }
        }
    }
    post {
        always {
            echo "Cleaning up Docker images from local host"
            sh ".ci/scripts/util/cleanup.sh ${DOCKER_TAG}"
            deleteDir()
        }
        success {
            echo 'Succeeded!'
        }
        unstable {
            echo 'Unstable :/'
        }
        failure {
            archiveArtifacts artifacts: ".secrets.diff", allowEmptyArchive: true, fingerprint: true
            echo 'Failed :('
        }
        changed {
            echo 'Things were different before...'
        }
    }
}
