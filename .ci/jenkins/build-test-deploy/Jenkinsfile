#!/usr/bin/env groovy

pipeline {
    agent any
    environment {
        DOCKER_IMAGE_PREFIX = 'opera_pge'
        DOCKER_TAG = """${sh(
                     returnStdout: true,
                     script: 'echo ${GIT_BRANCH##*/}'
                     ).trim()}"""
        RUN_ID = """${sh(
                 returnStdout: true,
                 script: 'echo $$'
                 ).trim()}"""
        GHCR_IMAGE_PREFIX = 'ghcr.io/nasa/opera-sds-pge'
    }
    parameters {
        // TODO: update default value as newer PGE's are added
        string(name: 'DOCKER_IMAGE_SUFFIXES', defaultValue: 'dswx_hls,cslc_s1,rtc_s1,dswx_s1,disp_s1,dswx_ni,dist_s1,tropo',
               description: 'Comma-delimited list of PGE names to include for build/test/deploy')
        booleanParam(name: 'PUBLISH_DOCS', defaultValue: true,
                     description: 'Publish sphinx documentation to ghpages')
        booleanParam(name: 'PUSH_TO_GHCR', defaultValue: false,
                     description: 'If selected, also push built PGE container(s) to GHCR (Only select for non ER/RC releases)')
        string(name: 'ART_URL', defaultValue: 'https://artifactory-fn.jpl.nasa.gov/artifactory',
               description: 'Artifactory-FN URL.')
        string(name: 'ART_TAR_PATH', defaultValue: 'general/gov/nasa/jpl/opera/sds/pge/',
               description: 'Artifactory path to publish PGE docker image tar files to.')
        string(name: 'ART_DOCS_PATH', defaultValue: 'general/gov/nasa/jpl/opera/sds/pge/documentation',
               description: 'Artifactory path to publish PGE documentation files to.')
        string(name: 'ART_DOCKER_PATH', defaultValue: '/gov/nasa/jpl/opera/sds/pge/',
               description: 'Artifactory path to push Docker images.')
        string(name: 'ART_DOCKER_REGISTRY', defaultValue: 'artifactory-fn.jpl.nasa.gov:16001',
               description: 'Address of Artifactory-FN Docker registry for uploading Docker images.')
        credentials (name: 'ART_CREDENTIALS',
                     defaultValue: 'artifactory-operapgebot',
                     credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl',
                     description: 'Artifactory-FN credentials for account operapgebot. Used to push/pull images from Artifactory during build.',
                     required: true)
        credentials(name: 'GITHUB_OAUTH_TOKEN',
                    defaultValue: '8443f80e-014a-4dea-b122-5ca34d8aaab1',
                    credentialType: 'org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl',
                    description: 'GitHub OAUTH Token for user collinss-jpl on github.com',
                    required: true)
        credentials(name: 'GHCR_TOKEN',
                    defaultValue: '702a7ee2-815c-46c4-bbb8-6550be70a339',
                    credentialType: 'org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl',
                    description: 'github.com ghcr push token for user collinss-jpl',
                    required: true)
    }
    stages {
        stage('Build OPERA PGE Docker image(s)') {
            steps {
                script {
                    docker.withRegistry ('https://' + params.ART_DOCKER_REGISTRY, params.ART_CREDENTIALS) {
                        DOCKER_IMAGE_SUFFIXES.tokenize(',').each { DOCKER_IMAGE_SUFFIX ->
                            echo "Building ${DOCKER_IMAGE_PREFIX}/${DOCKER_IMAGE_SUFFIX} docker image with tag ${DOCKER_TAG}"
                            sh label: "Build ${DOCKER_IMAGE_PREFIX}/${DOCKER_IMAGE_SUFFIX} OPERA Docker image",
                               script: ".ci/scripts/${DOCKER_IMAGE_SUFFIX}/build_${DOCKER_IMAGE_SUFFIX}.sh --tag $DOCKER_TAG"
                        }
                    }
                }
            }
        }
        stage('Test OPERA PGE Docker image(s)') {
            steps {
                script {
                    def indexFiles = []
                    def reportTitles = []

                    DOCKER_IMAGE_SUFFIXES.tokenize(',').each { DOCKER_IMAGE_SUFFIX ->
                        echo "Testing ${DOCKER_IMAGE_PREFIX}/${DOCKER_IMAGE_SUFFIX} docker image with tag ${DOCKER_TAG}"

                        sh label: "Test ${DOCKER_IMAGE_PREFIX}/${DOCKER_IMAGE_SUFFIX} OPERA Docker image",
                           script: ".ci/scripts/${DOCKER_IMAGE_SUFFIX}/test_${DOCKER_IMAGE_SUFFIX}.sh --tag $DOCKER_TAG"

                        indexFiles << "${DOCKER_IMAGE_SUFFIX}/coverage_html/index.html"
                        reportTitles << "${DOCKER_IMAGE_SUFFIX} Code Coverage"
                    }

                    publishHTML([allowMissing: true,
                             alwaysLinkToLastBuild: true,
                             keepAll: true,
                             reportDir: 'test_results',
                             reportFiles: indexFiles.join(','),
                             reportName: 'Code Coverage',
                             reportTitles: reportTitles.join(',')])
                }
                junit 'test_results/**/*.xml'
                archiveArtifacts artifacts: 'test_results/**/*.log', fingerprint: true
            }
        }
        stage('Scan image(s) for vulnerabilities'){
            environment{
                TMPDIR = '/data/tmp'
            }
            steps{
                echo "Scanning ${DOCKER_IMAGE_PREFIX} docker images with tag ${DOCKER_TAG} for patchable vulnerabilities"
                sh label: 'Update Grype DB',
                   script: "grype db update"
                script{
                    DOCKER_IMAGE_SUFFIXES.tokenize(',').each { DOCKER_IMAGE_SUFFIX ->
                        echo "Checking ${DOCKER_IMAGE_PREFIX}/${DOCKER_IMAGE_SUFFIX} docker image with tag ${DOCKER_TAG}"
                        sh label: "Check ${DOCKER_IMAGE_PREFIX}/${DOCKER_IMAGE_SUFFIX} OPERA Docker image",
                           script: """
                           grype ${DOCKER_IMAGE_PREFIX}/${DOCKER_IMAGE_SUFFIX}:$DOCKER_TAG --only-fixed -o template -t .ci/jenkins/grype_html.tmpl --file test_results/${DOCKER_IMAGE_SUFFIX}/grype_vulnerabilities.html
                           """
                    }

                    archiveArtifacts artifacts: 'test_results/**/grype_vulnerabilities.html', fingerprint: true
                }
            }
        }
        stage('Install miniforge') {
            steps{
                sh label: 'Download and install',
                   script: """#!/bin/bash
                     mkdir -p /var/lib/jenkins/conda_installs/${RUN_ID}/miniforge
                     wget -q https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh -O /var/lib/jenkins/conda_installs/${RUN_ID}/miniforge/miniforge.sh
                     bash /var/lib/jenkins/conda_installs/${RUN_ID}/miniforge/miniforge.sh -b -u -p /var/lib/jenkins/conda_installs/${RUN_ID}/miniforge
                     rm /var/lib/jenkins/conda_installs/${RUN_ID}/miniforge/miniforge.sh
                   """
            }
        }
        stage('Generate OPERA PGE Sphinx Documentation') {
            when { expression { return params.PUBLISH_DOCS } }
            steps {
                script {
                    echo "Installing Sphinx Dependencies"
                    sh label: 'Installing conda environment for Sphinx',
                       script: """#!/bin/bash
                         /var/lib/jenkins/conda_installs/${RUN_ID}/miniforge/bin/conda create -n sphinx_env python=3.8 pip
                         /var/lib/jenkins/conda_installs/${RUN_ID}/miniforge/bin/conda init bash
                    """

                    sh label: 'Installing Sphinx to conda environment',
                       script: '''#!/bin/bash
                       . /var/lib/jenkins/.bashrc
                       conda activate sphinx_env
                       pip install -r ./requirements.txt
                       pip install -r ./requirements_dev.txt
                       '''

                    sh label: 'Invoking clean target for Sphinx build',
                       script: '''#!/bin/bash
                       . /var/lib/jenkins/.bashrc
                       conda activate sphinx_env
                       /usr/bin/make --directory=./docs clean
                       '''

                    sh label: 'Invoking html target for Sphinx build',
                       script: '''#!/bin/bash
                       . /var/lib/jenkins/.bashrc
                       conda activate sphinx_env
                       /usr/bin/make --directory=./docs html
                       '''
                }
            }
        }
        stage('Push OPERA PGE HTML documentation to GitHub Pages') {
            when { expression { return params.PUBLISH_DOCS } }
            steps {
                dir('/data/tmp/tmp.gh-pages'){
                    git branch: 'gh-pages',
                        changelog: false,
                        poll: false,
                        url: 'https://github.com/nasa/opera-sds-pge'

                    withCredentials([string(credentialsId: params.GITHUB_OAUTH_TOKEN, variable: 'TOKEN')]) {
                        sh label: 'Updating gh-pages branch with latest HTML docs',
                           script: '''#!/bin/bash
                           cp -rf ${WORKSPACE}/docs/_build/html/* .
                           git add .
                           git add -u
                           git commit -m "HTML docs update by Jenkins"
                           git remote set-url origin https://${TOKEN}@github.com/nasa/opera-sds-pge.git
                           git push --set-upstream origin gh-pages
                           '''
                    }
                    deleteDir()
                }

            }
        }
        stage('Upload OPERA PGE Docker image tar files to Artifactory-FN') {
            steps {
                script {
                    rtServer (
                        id: 'ARTIFACTORY_FN_SERVER',
                        url: params.ART_URL,
                        credentialsId: params.ART_CREDENTIALS,
                        timeout: 300
                    )

                    DOCKER_IMAGE_SUFFIXES.tokenize(',').each { DOCKER_IMAGE_SUFFIX ->
                        def DOCKER_IMAGE = "${DOCKER_IMAGE_PREFIX}/${DOCKER_IMAGE_SUFFIX}:${DOCKER_TAG}"
                        def TAR_FILE_NAME = "${DOCKER_IMAGE_PREFIX}-${DOCKER_IMAGE_SUFFIX}-${DOCKER_TAG}.tar"
                        echo "Saving Docker image ${DOCKER_IMAGE} to tar file ${TAR_FILE_NAME}"
                        sh "docker save -o ${TAR_FILE_NAME} ${DOCKER_IMAGE}"
                        sh "gzip -f ${TAR_FILE_NAME}"
                        def TAR_GZ_FILE_NAME = "${TAR_FILE_NAME}.gz"

                        echo "Uploading ${DOCKER_IMAGE} tar file to Artifactory-FN"

                        rtUpload(
                            serverId: "ARTIFACTORY_FN_SERVER",
                            spec:
                              """{
                                  "files": [
                                      {
                                          "pattern": "${TAR_GZ_FILE_NAME}",
                                          "target": "${params.ART_TAR_PATH}${DOCKER_IMAGE_SUFFIX}/"
                                      }
                                  ]
                              }"""
                        )

                        sh "rm -f ${TAR_FILE_NAME} ${TAR_GZ_FILE_NAME}"
                    }
                }
            }
        }
        stage('Upload Docker images to Artifactory FN Docker Registry') {
            steps {
                script {
                    rtServer (
                        id: 'ARTIFACTORY_FN_DOCKER_REGISTRY',
                        url: params.ART_DOCKER_REGISTRY,
                        credentialsId: params.ART_CREDENTIALS,
                        timeout: 300
                    )

                    DOCKER_IMAGE_SUFFIXES.tokenize(',').each { DOCKER_IMAGE_SUFFIX ->
                        def DOCKER_IMAGE = "${DOCKER_IMAGE_PREFIX}/${DOCKER_IMAGE_SUFFIX}:${DOCKER_TAG}"
                        sh "docker tag ${DOCKER_IMAGE} ${ART_DOCKER_REGISTRY}${ART_DOCKER_PATH}${DOCKER_IMAGE}"
                        echo "Publishing ${DOCKER_IMAGE} to Artifactory FN Docker Registry"
                        rtDockerPush(
                            serverId: "ARTIFACTORY_FN_DOCKER_REGISTRY",
                            image: "${ART_DOCKER_REGISTRY}${ART_DOCKER_PATH}${DOCKER_IMAGE}",
                            targetRepo: "docker-develop-local"
                        )
                    }
                }
            }
        }
        stage('(Optional) Push Docker images to GHCR'){
            when { expression { return params.GHCR_TOKEN } }
            steps {
                withCredentials([string(credentialsId: params.GHCR_TOKEN, variable: 'TOKEN')]) {
                    sh label: 'GHCR login',
                       script: 'echo ${TOKEN} | docker login ghcr.io -u collinss-jpl --password-stdin'
                }

                script {
                    DOCKER_IMAGE_SUFFIXES.tokenize(',').each { DOCKER_IMAGE_SUFFIX ->
                        def DOCKER_IMAGE = "${DOCKER_IMAGE_PREFIX}/${DOCKER_IMAGE_SUFFIX}:${DOCKER_TAG}"
                        echo "Publishing ${DOCKER_IMAGE} to GHCR"

                        sh label: 'Retag & push',
                           script: """
                             docker tag ${DOCKER_IMAGE} ${GHCR_IMAGE_PREFIX}/${DOCKER_IMAGE}
                             docker push ${GHCR_IMAGE_PREFIX}/${DOCKER_IMAGE}
                           """
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                catchError (buildResult: 'FAILURE', stageResult: 'FAILURE', message: 'Docker image cleanup failed') {
                    echo "Cleaning up Docker images from local host"
                    sh ".ci/scripts/util/cleanup.sh ${DOCKER_TAG}"
                }
                catchError (buildResult: 'FAILURE', stageResult: 'FAILURE', message: 'Conda cleanup failed') {
                    if (params.PUBLISH_DOCS) {
                        echo "Removing Sphinx build environment"
                        sh "/var/lib/jenkins/conda_installs/${RUN_ID}/miniforge/bin/conda env remove --yes --name sphinx_env"
                        sh "/var/lib/jenkins/conda_installs/${RUN_ID}/miniforge/bin/conda clean -ay"
                        sh "/var/lib/jenkins/conda_installs/${RUN_ID}/miniforge/bin/conda init --reverse"
                        sh "rm -rf /var/lib/jenkins/conda_installs/${RUN_ID}/"
                    }
                }
                deleteDir()
            }
        }
        success {
            echo 'Succeeded!'
        }
        unstable {
            echo 'Unstable :/'
        }
        failure {
            echo 'Failed :('
        }
        changed {
            echo 'Things were different before...'
        }
    }
}
