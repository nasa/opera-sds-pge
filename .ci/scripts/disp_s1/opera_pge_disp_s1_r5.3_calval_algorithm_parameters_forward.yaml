ps_options:
  # Amplitude dispersion threshold to consider a pixel a PS.
  #   Type: number.
  amp_dispersion_threshold: 0.25
phase_linking:
  # Size of the ministack for sequential estimator.
  #   Type: integer.
  ministack_size: 1000
  # Maximum number of compressed images to use in sequential estimator. If there are more
  #   ministacks than this, the earliest CCSLCs will be left out of the later stacks.
  #   Type: integer.
  max_num_compressed: 5
  half_window:
    # Half window size (in pixels) for x direction.
    #   Type: integer.
    x: 11
    # Half window size (in pixels) for y direction.
    #   Type: integer.
    y: 5
  # Use EVD on the coherence instead of using the EMI algorithm.
  #   Type: boolean.
  use_evd: false
  # Beta regularization parameter for correlation matrix inversion. 0 is no regularization.
  #   Type: number.
  beta: 0.0
  # Method for finding SHPs during phase linking.
  #   Type: string.
  #   Options: ['glrt', 'ks', 'rect', 'rect'].
  shp_method: glrt
  # Significance level (probability of false alarm) for SHP tests.
  #   Type: number.
  shp_alpha: 0.005
  # StBAS parameter to include only nearest-N interferograms forphase linking. A
  #   `baseline_lag` of `n` will only include the closest`n` interferograms. `baseline_line`
  #   must be positive.
  #   Type: integer | null.
  baseline_lag:
interferogram_network:
  # For single-reference network: Index of the reference image in the network.
  #   Type: integer | null.
  reference_idx:
  # Max `n` to form the nearest-`n` interferograms by index.
  #   Type: integer | null.
  max_bandwidth:
  # Maximum temporal baseline of interferograms.
  #   Type: integer | null.
  max_temporal_baseline:
  # For manual-index network: list of (ref_idx, sec_idx) defining the interferograms to form.
  #   Type: array | null.
  indexes:
    -   - 0
        - -1
unwrap_options:
  # Whether to run the unwrapping step after wrapped phase estimation.
  #   Type: boolean.
  run_unwrap: true
  # Whether to run Goldstein filtering step on wrapped interferogram.
  #   Type: boolean.
  run_goldstein: false
  # Whether to run interpolation step on wrapped interferogram.
  #   Type: boolean.
  run_interpolation: false
  # Phase unwrapping method.
  #   Type: string.
  #   Options: ['snaphu', 'icu', 'phass', 'spurt', 'whirlwind'].
  unwrap_method: phass
  # Number of interferograms to unwrap in parallel.
  #   Type: integer.
  n_parallel_jobs: 1
  # Set wrapped phase/correlation to 0 where mask is 0 before unwrapping. .
  #   Type: boolean.
  zero_where_masked: false
  preprocess_options:
    # Adaptive phase (Goldstein) filter exponent parameter.
    #   Type: number.
    alpha: 0.5
    # (for interpolation) Maximum radius to find scatterers.
    #   Type: integer.
    max_radius: 51
    # Threshold on the correlation raster to use for interpolation. Pixels with less than this
    #   value are replaced by a weighted combination of neighboring pixels.
    #   Type: number.
    interpolation_cor_threshold: 0.5
  snaphu_options:
    # Number of tiles to split the inputs into using SNAPHU's internal tiling.
    #   Type: array.
    ntiles:
      - 5
      - 5
    # Amount of tile overlap (in pixels) along the (row, col) directions.
    #   Type: array.
    tile_overlap:
      - 0
      - 0
    # Number of tiles to unwrap in parallel for each interferogram.
    #   Type: integer.
    n_parallel_tiles: 1
    # Initialization method for SNAPHU.
    #   Type: string.
    #   Options: ['mcf', 'mst'].
    init_method: mcf
    # Statistical cost mode method for SNAPHU.
    #   Type: string.
    #   Options: ['defo', 'smooth'].
    cost: smooth
  tophu_options:
    # Number of tiles to split the inputs into.
    #   Type: array.
    ntiles:
      - 5
      - 5
    # Extra multilook factor to use for the coarse unwrap.
    #   Type: array.
    downsample_factor:
      - 5
      - 5
    # Initialization method for SNAPHU.
    #   Type: string.
    #   Options: ['mcf', 'mst'].
    init_method: mcf
    # Statistical cost mode method for SNAPHU.
    #   Type: string.
    #   Options: ['defo', 'smooth'].
    cost: smooth
  spurt_options:
    # Temporal coherence to pick pixels used on an irregular grid.
    #   Type: number.
    temporal_coherence_threshold: 0.6
    general_settings:
      # Tile up data spatially.
      #   Type: boolean.
      use_tiles: true
    tiler_settings:
      # Maximum number of tiles allowed.
      #   Type: integer.
      max_tiles: 16
      # Number of points used for determining tiles based on density.
      #   Type: integer.
      target_points_for_generation: 120000
      # Target points per tile when generating tiles.
      #   Type: integer.
      target_points_per_tile: 800000
      # Dilation factor of non-overlapping tiles. 0.05 would lead to 5 percent dilation of the
      #   tile.
      #   Type: number.
      dilation_factor: 0.05
    solver_settings:
      # Number of workers for temporal unwrapping in parallel. Set value to <=0 to let workflow
      #   use default workers (ncpus - 1).
      #   Type: integer.
      t_worker_count: 1
      # Number of workers for spatial unwrapping in parallel. Set value to <=0 to let workflow use
      #   (ncpus - 1).
      #   Type: integer.
      s_worker_count: 1
      # Temporal unwrapping operations over spatial links are performed in batches and each batch
      #   is solved in parallel.
      #   Type: integer.
      links_per_batch: 50000
      # Temporal unwrapping costs.
      #   Type: string.
      #   Options: ['constant', 'distance', 'centroid'].
      t_cost_type: constant
      # Scale factor used to compute edge costs for temporal unwrapping.
      #   Type: number.
      t_cost_scale: 100.0
      # Spatial unwrapping costs.
      #   Type: string.
      #   Options: ['constant', 'distance', 'centroid'].
      s_cost_type: constant
      # Scale factor used to compute edge costs for spatial unwrapping.
      #   Type: number.
      s_cost_scale: 100.0
    merger_settings:
      # Minimum number of overlap pixels to be considered valid.
      #   Type: integer.
      min_overlap_points: 25
      # Currently, only 'dirichlet' is supported.
      #   Type: dirichlet.
      method: dirichlet
      # Method used to estimate bulk offset between tiles.
      #   Type: string.
      #   Options: ['integer', 'L2'].
      bulk_method: L2
output_options:
  # Output (x, y) resolution (in units of input data).
  #   Type: object | null.
  output_resolution:
  # Alternative to specifying output resolution: Specify the (x, y) strides (decimation
  #   factor) to perform while processing input. For example, strides of [4, 2] would turn an
  #   input resolution of [5, 10] into an output resolution of [20, 20].
  #   Type: object.
  strides:
    x: 6
    y: 3
  # Area of interest: [left, bottom, right, top] coordinates. e.g.
  #   `bbox=[-150.2,65.0,-150.1,65.5]`.
  #   Type: array | null.
  bounds:
  # EPSG code for the `bounds` coordinates, if specified.
  #   Type: integer.
  bounds_epsg: 4326
  # Options for `create_dataset` with h5py.
  #   Type: object.
  hdf5_creation_options:
    chunks:
      - 128
      - 128
    compression: gzip
    compression_opts: 4
    shuffle: true
  # GDAL creation options for GeoTIFF files.
  #   Type: array.
  gtiff_creation_options:
    - COMPRESS=lzw
    - ZLEVEL=4
    - BIGTIFF=yes
    - TILED=yes
    - INTERLEAVE=band
    - BLOCKXSIZE=128
    - BLOCKYSIZE=128
  # Whether to add overviews to the output GeoTIFF files. This will increase file size, but
  #   can be useful for visualizing the data with web mapping tools. See
  #   https://gdal.org/programs/gdaladdo.html for more.
  #   Type: boolean.
  add_overviews: true
  # List of overview levels to create (if `add_overviews=True`).
  #   Type: array.
  overview_levels:
    - 4
    - 8
    - 16
    - 32
    - 64
# Name of the subdataset to use in the input NetCDF files.
#   Type: string.
subdataset: /data/VV
